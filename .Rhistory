test<-read.csv("G:\\horse_racing_ast_10gb_win_mkt_test100000.txt",header=T)
test(10)
test<-read.csv("G:\\horse_racing_ast_10gb_win_mkt_test100000.txt")
str(test)
sumary(test)
summary(test)
fix(test)
test<-read.csv("G:\\horse_racing_ast_10gb_win_mkt_test100000.txt")
str(test)
test<-read.csv2("G:\\horse_racing_ast_10gb_win_mkt_test100000.txt")
test<-read.csv("G:\\horse_racing_ast_10gb_win_mkt_test100000.txt")
q()
install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(abs(z-1))
mysqrt <- sqrt(z-1)
mysqrt <- abs(sqrt(z-1))
sqrt(z-1)
info()
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,1000)
z*2+1000
mysqrt
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files()
?list.files
args(list.files)
old.dir <- getwd()
dircreate(DSS)
dir.create(DSS)
dir.create("DSS")
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
dir.create("testdir2")
dir.create("testdir2/testdir3", recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive=true)
unlink("testdir2", recursive=TRUE)
setwd("old.dir")
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive=TRUE)
play()
nxt()
1:20
pi:10
15:1
? `:`
seq(1,20)
seq(0,10,by-.5)
seq(0,10,by=.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- (0.5, 55, -10, 6)
num_vect <- numeric(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- if(num_vect<1)
tf <- which(num_vect<1)
tf <- num_vect < 1
tf()
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
c(my_char, "Petar")
paste(my_char,collapse=" ")
Petar <- c((my_char,"Petar")
Petar <- c(my_char,"Petar")
Petar <- c(my_char,"Swirl")
Petar <- c(my_char,"Petar")
Petar <- c(my_char,"Petar")
Petar <- c(my_char,"Petar")
Petar <- c(my_char,"Petar")
info()
my_name <- c(my_char,"Petar")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(letters, 1:4, sep="-")
paste(LETTERS, 1:4, sep="-")
BYE()
INFO()
info()
bye()
nxt()
info()
nxt()
1
main()
swirl
play()
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z<- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
search(my_data,== NA)
search(my_data,"== NA")
my_data == NA
sum(my_na)
my_data
0\0
0/0
inf - inf
inf
inf()
0
NaN
NA
info()
Inf()
Inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[~is.na(x) & x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vact2 <- c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2)<- c("foo","bar","norf")
identical(x='vect',y ='vect2')
? identical
??identical
expect_identical(vect,vect2)
expect_identical(vect,vect2)
identical(x=vect,y =vect2)
vect["bar'"]
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matric <- my_vector
my_matrix <- my_vector
?matrix
my_matrix <- matrix(my_vector)
my_matrix <- matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(x=matric,y=matrix2)
identical(x=matrix,y=matrix2)
identical(x=my_matrix,y=my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(my_matrix,patients)
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <= cnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5!=7
5!=7
5 !== 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 | && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vars <- lapply(flag_shapes, unique())
unique_vars <- lapply(flag_shapes, unique
unique_vars <- lapply(flag_shapes, unique)
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,funcion(elem) elem[2])
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags, unique,character(1))
vapply(flags, class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample
sample(1:20,10)
LETTERS
sample(LATTERS)
sample(LETTERS)
flips <- sample(c(0,1),100,replacement=TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replacement=TRUE,c(0.3,0.7))
flips <- sample(x=c(0,1),size=100,replacement=TRUE,prob=c(0.3,0.7))
sample
flips <- sample(c(0,1),100,replacement=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
rbinom
?rbinom
rbinom(1,size=100, prob=.7)
flips2 <- rbinom(1,size=100,prob=.7)
flips2 <- rbinom(100,size=1,prob=.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean = 100,sd=25)
rpois(5,mean=10)
??rpois
rpois
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
hist(cm)
skip()
swirl()
hist(cm)
skip()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
chooseCRANmirror()
utils:::menuInstallPkgs()
install.packages('lubridate')
q()
q()
packages
packages()
ls
ls()
list.dirs
list.dirs()
install.packages('xlsx')
library(xlsx)
install.packages('rJava')
library(xlsx)
library(rJava)
Sys.setenv(JAVAHOME='C:\Program Files\Java\jre7') # for 64-bit
Sys.setenv(JAVAHOME="C:\Program Files\Java\jre7") # for 64-bit
install.packages('rJava')
Sys.setenv(JAVAHOME="C:\Program Files\Java\jre7") # for 64-bit
Sys.setenv(JAVAHOME='C:\Program Files\Java\jre7') # for 64-bit
library(xlsx)
library(rJava)
library(httr)
require(httpuv)
setwd("~/AST/Specialization in Data Science/05_Reproducable Research/Course Project 1")
library(plyr)
rm(list=ls())
# Prepare the environment
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
library(data.table)
library(ggplot2) # we shall use ggplot2 for plotting figures
library(scales)
# Read Activity data file
Activity <- read.csv("activity.csv")
# Convert column Date to date format
Activity <- mutate(Activity,date = as.Date(Activity$date))
Activity <- mutate(Activity,interval=as.factor(Activity$interval))
str(Activity)
# What is mean total number of steps taken per day?
# For this part of the assignment, you can ignore the missing values in the dataset.
# 1. Make a histogram of the total number of steps taken each day
# 2. Calculate and report the mean and median total number of steps taken per day
steps_per_day <- aggregate(steps ~ date, Activity, sum)
colnames(steps_per_day) <- c("date","steps")
ggplot(steps_per_day, aes(x = date, y = steps)) +
geom_bar(stat = "identity",fill="Blue" ) +
theme_classic() +
labs(title="Histogram of Steps Taken per Day",x = "Date", y = "Steps by day") +
scale_x_date(labels = date_format("%d-%m-%Y"))
steps_mean   <- mean(steps_per_day$steps, na.rm=TRUE)
steps_median <- median(steps_per_day$steps, na.rm=TRUE)
ActivityNoNAs <- subset(Activity, is.na(Activity$steps) == F)
averagePerInterval <- ddply(ActivityNoNAs, .(interval), summarise, steps=mean(steps))
plot(averagePerInterval$interval, averagePerInterval$steps,axes = F, type="l", col="blue", xlab="Time", ylab="Average Number of Steps",
main="Average Daily Activity Pattern")
axis(1,at=c(0,600,1200,1800,2400), label = c("0:00","6:00","12:00","18:00","24:00"))
axis(2)
averagePerInterval[which.max(averagePerInterval$steps),]
sum(is.na(Activity$steps))
imputed <- Activity
for (i in 1:nrow(imputed)){
if (is.na(imputed$steps[i])){
imputed$steps[i] <- averagePerInterval$steps[which(imputed$interval[i] == averagePerInterval$interval)]}
}
imputed <- arrange(imputed, interval)
totalPerDayImputed <- ddply(imputed, .(date), summarise, steps=sum(steps))
hist(totalPerDayImputed$steps, breaks = 20, main="Number of Steps", xlab="Total number of steps taken each day", ylab = "Number of Days", col="blue")
mean(totalPerDayImputed$steps)
median(totalPerDayImputed$steps)
abs(mean(totalPerDay$steps)-mean(totalPerDayImputed$steps))
abs(mean(steps_per_day$steps)-mean(totalPerDayImputed$steps))
abs(median(steps_per_day$steps)- median(totalPerDayImputed$steps))/median(steps_per_day$steps)
totalDifference <- sum(imputed$steps) - sum(ActivityNoNAs$steps)
totalDifference
Sys.setlocale("LC_TIME", "English")
imputed$weekdays <- weekdays(as.Date(imputed$date))
imputed$weekdays <- ifelse(imputed$weekdays %in% c("Saturday", "Sunday"),"weekend", "weekday")
average <- ddply(imputed, .(interval, weekdays), summarise, steps=mean(steps))
library(lattice)
xyplot(steps ~ interval | weekdays, data = average, layout = c(1, 2), type="l", xlab = "Interval", ylab = "Number of steps")
setwd("~/AST/Specialization in Data Science/05_Reproducable Research/Course Project 1/RepData_PeerAssessment1")
View(Activity)
plot(steps_per_day, aes(x = date, y = steps)), type="l", +
ggplot(steps_per_day, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
View(averagePerInterval)
View(averagePerInterval)
View(averagePerInterval)
View(averagePerInterval)
View(Activity)
